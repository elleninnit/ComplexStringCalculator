<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Sonar -->
<ruleset xmlns="http://codenarc.org/ruleset/1.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://codenarc.org/ruleset/1.0 http://codenarc.org/ruleset-schema.xsd"
         xsi:noNamespaceSchemaLocation="http://codenarc.org/ruleset-schema.xsd">
<rule class="org.codenarc.rule.groovyism.ExplicitArrayListInstantiationRule"/>
<rule class="org.codenarc.rule.groovyism.ExplicitHashMapInstantiationRule"/>
<rule class="org.codenarc.rule.basic.EmptyForStatementRule"/>
<rule class="org.codenarc.rule.unnecessary.UnnecessarySemicolonRule"/>
<rule class="org.codenarc.rule.imports.ImportFromSamePackageRule"/>
<rule class="org.codenarc.rule.convention.ConfusingTernaryRule"/>
<rule class="org.codenarc.rule.braces.WhileStatementBracesRule"/>
<rule class="org.codenarc.rule.basic.EqualsOverloadedRule"/>
<rule class="org.codenarc.rule.logging.PrintStackTraceRule"/>
<rule class="org.codenarc.rule.basic.EmptyElseBlockRule"/>
<rule class="org.codenarc.rule.formatting.BracesForTryCatchFinallyRule">
<property name="sameLine" value="true"/>
</rule>
<rule class="org.codenarc.rule.convention.InvertedIfElseRule"/>
<rule class="org.codenarc.rule.basic.EmptyIfStatementRule"/>
<rule class="org.codenarc.rule.groovyism.ExplicitHashSetInstantiationRule"/>
<rule class="org.codenarc.rule.braces.ElseBlockBracesRule">
<property name="bracesRequiredForElseIf" value="false"/>
</rule>
<rule class="org.codenarc.rule.concurrency.VolatileLongOrDoubleFieldRule"/>
<rule class="org.codenarc.rule.imports.NoWildcardImportsRule"/>
<rule class="org.codenarc.rule.unused.UnusedArrayRule"/>
<rule class="org.codenarc.rule.convention.VectorIsObsoleteRule"/>
<rule class="org.codenarc.rule.braces.ForStatementBracesRule"/>
<rule class="org.codenarc.rule.formatting.SpaceAfterCommaRule"/>
<rule class="org.codenarc.rule.formatting.BracesForForLoopRule">
<property name="sameLine" value="true"/>
</rule>
<rule class="org.codenarc.rule.exceptions.ThrowRuntimeExceptionRule"/>
<rule class="org.codenarc.rule.basic.DuplicateCaseStatementRule"/>
<rule class="org.codenarc.rule.imports.ImportFromSunPackagesRule"/>
<rule class="org.codenarc.rule.exceptions.CatchExceptionRule"/>
<rule class="org.codenarc.rule.unnecessary.UnnecessaryDefInMethodDeclarationRule"/>
<rule class="org.codenarc.rule.concurrency.ThreadYieldRule"/>
<rule class="org.codenarc.rule.grails.GrailsSessionReferenceRule"/>
<rule class="org.codenarc.rule.exceptions.ThrowExceptionRule"/>
<rule class="org.codenarc.rule.concurrency.SynchronizedMethodRule"/>
<rule class="org.codenarc.rule.concurrency.NestedSynchronizationRule"/>
<rule class="org.codenarc.rule.braces.IfStatementBracesRule"/>
<rule class="org.codenarc.rule.unused.UnusedMethodParameterRule"/>
<rule class="org.codenarc.rule.basic.EmptyCatchBlockRule">
<property name="ignoreRegex" value="ignore|ignored"/>
</rule>
<rule class="org.codenarc.rule.unused.UnusedPrivateMethodParameterRule"/>
<rule class="org.codenarc.rule.grails.GrailsServletContextReferenceRule"/>
<rule class="org.codenarc.rule.logging.SystemErrPrintRule"/>
<rule class="org.codenarc.rule.grails.GrailsStatelessServiceRule">
</rule>
<rule class="org.codenarc.rule.logging.PrintlnRule"/>
<rule class="org.codenarc.rule.unnecessary.UnnecessaryDefInVariableDeclarationRule"/>
<rule class="org.codenarc.rule.formatting.MissingBlankLineAfterPackageRule"/>
<rule class="org.codenarc.rule.formatting.SpaceAfterOpeningBraceRule">
<property name="ignoreEmptyBlock" value="true"/>
<property name="checkClosureMapEntryValue" value="true"/>
</rule>
<rule class="org.codenarc.rule.formatting.SpaceAfterForRule"/>
<rule class="org.codenarc.rule.formatting.ConsecutiveBlankLinesRule"/>
<rule class="org.codenarc.rule.naming.ClassNameSameAsFilenameRule"/>
<rule class="org.codenarc.rule.imports.UnnecessaryGroovyImportRule"/>
<rule class="org.codenarc.rule.basic.EqualsAndHashCodeRule"/>
<rule class="org.codenarc.rule.concurrency.SystemRunFinalizersOnExitRule"/>
<rule class="org.codenarc.rule.formatting.BracesForClassRule">
<property name="sameLine" value="true"/>
</rule>
<rule class="org.codenarc.rule.imports.UnusedImportRule"/>
<rule class="org.codenarc.rule.unnecessary.UnnecessaryDefInFieldDeclarationRule"/>
<rule class="org.codenarc.rule.basic.EmptySynchronizedStatementRule"/>
<rule class="org.codenarc.rule.basic.EmptyTryBlockRule"/>
<rule class="org.codenarc.rule.exceptions.CatchRuntimeExceptionRule"/>
<rule class="org.codenarc.rule.formatting.SpaceAroundClosureArrowRule"/>
<rule class="org.codenarc.rule.exceptions.ThrowThrowableRule"/>
<rule class="org.codenarc.rule.basic.AssignmentInConditionalRule"/>
<rule class="org.codenarc.rule.groovyism.ExplicitCallToEqualsMethodRule"/>
<rule class="org.codenarc.rule.unnecessary.UnnecessaryGetterRule"/>
<rule class="org.codenarc.rule.basic.EmptyClassRule"/>
<rule class="org.codenarc.rule.formatting.SpaceAfterClosingBraceRule">
<property name="checkClosureMapEntryValue" value="true"/>
</rule>
<rule class="org.codenarc.rule.formatting.BracesForIfElseRule">
<property name="validateElse" value="false"/>
<property name="elseOnSameLineAsClosingBrace" value="true"/>
<property name="sameLine" value="true"/>
<property name="elseOnSameLineAsOpeningBrace" value="true"/>
</rule>
<rule class="org.codenarc.rule.basic.EmptyStaticInitializerRule"/>
<rule class="org.codenarc.rule.design.CloneableWithoutCloneRule"/>
<rule class="org.codenarc.rule.basic.ReturnFromFinallyBlockRule"/>
<rule class="org.codenarc.rule.groovyism.ExplicitLinkedHashMapInstantiationRule"/>
<rule class="org.codenarc.rule.imports.MisorderedStaticImportsRule">
<property name="comesBefore" value="true"/>
</rule>
<rule class="org.codenarc.rule.formatting.SpaceAfterIfRule"/>
<rule class="org.codenarc.rule.exceptions.ThrowNullPointerExceptionRule"/>
<rule class="org.codenarc.rule.exceptions.CatchErrorRule"/>
<rule class="org.codenarc.rule.basic.BitwiseOperatorInConditionalRule"/>
<rule class="org.codenarc.rule.basic.EmptyInstanceInitializerRule"/>
<rule class="org.codenarc.rule.basic.EmptySwitchStatementRule"/>
<rule class="org.codenarc.rule.unnecessary.ConsecutiveStringConcatenationRule"/>
<rule class="org.codenarc.rule.groovyism.ExplicitLinkedListInstantiationRule"/>
<rule class="org.codenarc.rule.grails.GrailsPublicControllerMethodRule">
</rule>
<rule class="org.codenarc.rule.basic.EmptyWhileStatementRule"/>
<rule class="org.codenarc.rule.imports.DuplicateImportRule"/>
<rule class="org.codenarc.rule.logging.SystemOutPrintRule"/>
<rule class="org.codenarc.rule.formatting.SpaceBeforeClosingBraceRule">
<property name="ignoreEmptyBlock" value="true"/>
<property name="checkClosureMapEntryValue" value="true"/>
</rule>
<rule class="org.codenarc.rule.unused.UnusedObjectRule"/>
<rule class="org.codenarc.rule.formatting.BracesForMethodRule">
<property name="sameLine" value="true"/>
</rule>
<rule class="org.codenarc.rule.exceptions.ThrowErrorRule"/>
<rule class="org.codenarc.rule.unused.UnusedPrivateMethodRule"/>
<rule class="org.codenarc.rule.formatting.MissingBlankLineAfterImportsRule"/>
<rule class="org.codenarc.rule.unused.UnusedPrivateFieldRule">
<property name="ignoreFieldNames" value="serialVersionUID"/>
</rule>
<rule class="org.codenarc.rule.unused.UnusedVariableRule">
</rule>
<rule class="org.codenarc.rule.basic.EmptyMethodRule"/>
<rule class="org.codenarc.rule.convention.HashtableIsObsoleteRule"/>
<rule class="org.codenarc.rule.formatting.LineLengthRule">
<property name="ignoreImportStatements" value="true"/>
<property name="length" value="150"/>
<property name="ignorePackageStatements" value="true"/>
</rule>
<rule class="org.codenarc.rule.size.NestedBlockDepthRule">
<property name="maxNestedBlockDepth" value="5"/>
<property name="ignoreRegex" value=".*(b|B)uilder"/>
</rule>
<rule class="org.codenarc.rule.basic.EmptyFinallyBlockRule"/>
<rule class="org.codenarc.rule.basic.ThrowExceptionFromFinallyBlockRule"/>
<rule class="org.codenarc.rule.exceptions.CatchNullPointerExceptionRule"/>
</ruleset>